#!/usr/bin/python

from __future__ import print_function
import subprocess
import os
import sys
import itertools as itt
from tempfile import mkstemp
from datetime import timedelta

import click

QSUB = '/opt/pbs/bin/qsub'
RESP = 'RESP'


PLAN = """#!/bin/bash
#PBS -l nodes=1:ppn=1
#PBS -l mem=4gb

module purge
module add python/3.6.5

RESP_DIR="$PBS_O_HOME/RESP"
SW_DIR="$PBS_O_HOME/WDE/exp01/pywde-run"

mkdir -p $RESP_DIR/%(exp_dir)s
cd $RESP_DIR/..

. $SW_DIR/.venv/bin/activate
export PYTHONPATH=$SW_DIR/src
export LC_ALL=en_AU.utf8
export LANG=en_AU.utf8
"""


def popen_args(fname, jname, wtime):
    env = os.environ.copy()
    args = [QSUB,
            '-N', jname,
            '-l', 'walltime=%s' % wtime,
            fname
            ]
    cwd = '%s/%s/job.output' % (env['HOME'], RESP)
    if not os.path.exists(cwd):
        os.makedirs(cwd)
    return args, cwd


@click.group()
def main():
    pass


@main.command()
def batch_samples():
    """
    Launch jobs to generate samples
    """

    def gen_samples_walltime(num_obvs):
        return num_obvs * 90.0 / 1000 + 30.0

    dists = ['ex01', 'ex02', 'ex03', 'ex04']
    num_obvs = [250, 500, 1000, 1500, 2000, 3000, 4000]
    tot_time = 0.0
    jobs = []
    for dist, nobs in itt.product(dists, num_obvs):
        tot_time += gen_samples_walltime(nobs)
        jobs.append(('gen-samples', (dist, str(nobs))))
        if tot_time > 3600:
            gen_and_launch(jobs, tot_time, job_name='gen-samples', exp_dir='exp02')
            tot_time = 0.0
            jobs = []
    if len(jobs) > 0:
        gen_and_launch(jobs, tot_time, job_name='gen-samples', exp_dir='exp02')


@main.command()
def batch_bestj():
    """
    Launch jobs to process bestj
    """

    def walltime(num):
        return 125 + 0.5 * num + 0.00025 * num * num

    num_obvs = [100, 500, 1000, 1500, 2500, 3500, 5000]
    plans = [
        ('mix8', ['db4', 'sym6']),
        ('tmx4', ('sym6', 'bior2.8')),
        ('mix9', ('db4', 'sym6')),
        ('mix6', ('sym6', 'bior3.9')),
    ]
    tot_time = 0.0
    jobs, resp_num = [], 1
    resp_name = lambda n: 'RESP/exp01/results-%05d.tab' % n
    os.makedirs('RESP/exp01', exist_ok=True)
    for a_plan in plans:
        dist_code, wavelets = a_plan
        for wave_name, num, sample_no in itt.product(wavelets, num_obvs, range(100)):
            tot_time += int(1.25 * walltime(num))
            job_data = ('best-j', (dist_code, str(num), str(sample_no + 1), wave_name, resp_name(resp_num)))
            jobs.append(job_data)
            if tot_time > 3600*4:
                gen_and_launch(jobs, tot_time)
                tot_time = 0.0
                jobs = []
                resp_num += 1
    if len(jobs) > 0:
        gen_and_launch(jobs, tot_time)
    print('TOTAL JOBS :', resp_num)


@main.command()
@click.argument('num_obvs', type=int)
def batch_bestc(num_obvs):
    """
    Launch jobs to process best-c
    """

    def walltime(num):
        "Estimated walltime in secs"
        return 1.2 * num

    # num_obvs = [100, 500, 1000, 1500, 2500, 3500, 5000]
    plans = [
        ('ex01', ['sym3', 'sym4', 'db4']),
        ('ex02', ['sym3', 'sym4', 'db4']),
        ('ex03', ['sym3', 'sym4', 'db4']),
        ('ex04', ['sym3', 'sym4', 'db4']),
    ]
    tot_time = 0.0
    resp_name = lambda n: 'RESP/exp02/results-%05d-%05d.tab' % (num_obvs, n)
    jobs, resp_num, fname = [], 1, resp_name(1)
    os.makedirs('RESP/exp02', exist_ok=True)
    headers = """dist_code\tnum_obvs\tsample_no\talgorithm\twave_name\topt_target\ttreshold_mode\tbest_j\tstart_j\tdelta_j\tnum_coeffs\tb_hat_j\thd\trunning_time"""
    for a_plan in plans:
        dist_code, wavelets = a_plan
        if len(jobs) > 0:
            gen_and_launch(jobs, tot_time, job_name='best-c', exp_dir='exp02', headers=headers)
            tot_time = 0.0
            jobs = []
            resp_num += 1
            fname = resp_name(resp_num)
        for wave_name, sample_no in itt.product(wavelets, range(100)):
            tot_time += int(1.25 * walltime(num_obvs))
            job_data = ('best-c', (dist_code, str(num_obvs), str(sample_no + 1), wave_name, fname))
            jobs.append(job_data)
            if tot_time > 3600*3:
                gen_and_launch(jobs, tot_time, job_name='best-c', exp_dir='exp02', headers=headers)
                tot_time = 0.0
                jobs = []
                resp_num += 1
                fname = resp_name(resp_num)
    if len(jobs) > 0:
        gen_and_launch(jobs, tot_time, job_name='best-c', exp_dir='exp02', headers=headers)
    print('TOTAL JOBS :', resp_num)



def gen_and_launch(jobs, tot_time, job_name='gen-samples', exp_dir='exp01', headers=None):
    os.makedirs('RESP/plans', exist_ok=True)
    ofd, fname = mkstemp(prefix='%s-' % job_name, suffix='.pbs', dir='RESP/plans', text=True)
    tot_time = (60*15) * (int(tot_time / (60*15))+1)
    with os.fdopen(ofd, 'wt') as fh:
        fh.write(PLAN % {'exp_dir': exp_dir})
        fh.write('rm -f "%s"\n' % jobs[0][1][-1])
        if headers:
            fh.write('%s\n' % headers)
        for job in jobs:
            command, params = job
            params = ' '.join(params)
            line = 'python3 $SW_DIR/src/runit.py %s %s\n' % (command, params)
            fh.write(line)
    args, cwd = popen_args(fname, job_name.upper(), timedelta(seconds=tot_time))
    print(' '.join(args))
    ## subprocess.call(args)


if __name__ == '__main__':
    main()
