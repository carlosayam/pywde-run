#!/usr/bin/python

from __future__ import print_function
import subprocess
import os
import sys
import itertools as itt
from tempfile import mkstemp
from datetime import timedelta

import click

QSUB = '/opt/pbs/bin/qsub'
RESP = 'RESP'


PLAN = """#!/bin/bash
#PBS -l nodes=1:ppn=1
#PBS -l mem=4gb

module purge
module add python/3.6.5

RESP_DIR="$PBS_O_HOME/RESP"
SW_DIR="$PBS_O_HOME/WDE/exp01/pywde-run"

mkdir -p $RESP_DIR/
cd $RESP_DIR/..

. $SW_DIR/.venv/bin/activate
export PYTHONPATH=$SW_DIR/src
export LC_ALL=en_AU.utf8
export LANG=en_AU.utf8
"""


def popen_args(fname, jname, wtime):
    env = os.environ.copy()
    args = [QSUB,
            '-N', jname,
            '-l', 'walltime=%s' % wtime,
            fname
            ]
    cwd = '%s/%s/job.output' % (env['HOME'], RESP)
    if not os.path.exists(cwd):
        os.makedirs(cwd)
    return args, cwd


@click.group()
def main():
    pass


@main.command()
def batch_samples():
    """
    Launch jobs to generate samples
    """

    def gen_samples_walltime(num_obvs):
        return num_obvs * 90.0 / 1000 + 30.0

    dists = ['mix8', 'tmx4', 'mix9', 'mix6']
    num_obvs = [100, 500, 1000, 1500, 2500, 3500, 5000, 6500]
    tot_time = 0.0
    jobs = []
    for dist, nobs in itt.product(dists, num_obvs):
        tot_time += gen_samples_walltime(nobs)
        jobs.append(('gen-samples', (dist, str(nobs))))
        if tot_time > 3600:
            gen_and_launch(jobs, tot_time)
            tot_time = 0.0
            jobs = []
    if len(jobs) > 0:
        gen_and_launch(jobs, tot_time)


def gen_and_launch(jobs, tot_time):
    os.makedirs('RESP/plans', exist_ok=True)
    ofd, fname = mkstemp(prefix='gen-samples-', suffix='.pbs', dir='RESP/plans', text=True)
    with os.fdopen(ofd, 'wt') as fh:
        fh.write(PLAN)
        for job in jobs:
            command, params = job
            params = ' '.join(params)
            line = 'python3 $SW_DIR/src/runit.py %s %s\n' % (command, params)
            fh.write(line)
    args, cwd = popen_args(fname, 'GEN-SAMPLES', timedelta(seconds=tot_time))
    print(args)
    ##subprocess.call(args)


if __name__ == '__main__':
    main()
