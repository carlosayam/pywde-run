#!/usr/bin/python

from __future__ import print_function
import subprocess
import os
import sys
import itertools as itt
from pathlib import Path
from tempfile import mkstemp
from datetime import timedelta
from pywde.spwde import SPWDE

import click

QSUB = '/opt/pbs/bin/qsub'
RESP = 'RESP'


PLAN = """#!/bin/bash
#PBS -l nodes=1:ppn=1
#PBS -l mem=4gb

module purge
module add python/3.6.5

RESP_DIR="$PBS_O_HOME/RESP"
SW_DIR="$PBS_O_HOME/WDE/exp01/pywde-run"

mkdir -p $RESP_DIR/%(exp_dir)s
cd $RESP_DIR/..

. $SW_DIR/.venv/bin/activate
export PYTHONPATH=$SW_DIR/src
export LC_ALL=en_AU.utf8
export LANG=en_AU.utf8
"""


def popen_args(fname, jname, wtime):
    env = os.environ.copy()
    args = [QSUB,
            '-N', jname,
            '-l', 'walltime=%s' % wtime,
            fname
            ]
    cwd = '%s/%s/job.output' % (env['HOME'], RESP)
    if not os.path.exists(cwd):
        os.makedirs(cwd)
    return args, cwd


@click.group()
def main():
    pass


@main.command()
def batch_samples():
    """
    Launch jobs to generate samples
    """

    def gen_samples_walltime(num_obvs):
        return num_obvs * 90.0 / 1000 + 30.0

    dists = ['ex01', 'ex02', 'ex03', 'ex04']
    num_obvs = [250, 500, 1000, 1500, 2000, 3000, 4000]
    tot_time = 0.0
    jobs = []
    for dist, nobs in itt.product(dists, num_obvs):
        tot_time += gen_samples_walltime(nobs)
        jobs.append(('gen-samples', (dist, str(nobs))))
        if tot_time > 3600:
            gen_and_launch(jobs, tot_time, job_name='gen-samples', exp_dir='exp02')
            tot_time = 0.0
            jobs = []
    if len(jobs) > 0:
        gen_and_launch(jobs, tot_time, job_name='gen-samples', exp_dir='exp02')


@main.command()
def batch_bestj():
    """
    Launch jobs to process bestj
    """

    def walltime(num):
        return 125 + 0.5 * num + 0.00025 * num * num

    num_obvs = [100, 500, 1000, 1500, 2500, 3500, 5000]
    plans = [
        ('mix8', ['db4', 'sym6']),
        ('tmx4', ('sym6', 'bior2.8')),
        ('mix9', ('db4', 'sym6')),
        ('mix6', ('sym6', 'bior3.9')),
    ]
    tot_time = 0.0
    jobs, resp_num = [], 1
    resp_name = lambda n: 'RESP/exp01/results-%05d.tab' % n
    os.makedirs('RESP/exp01', exist_ok=True)
    for a_plan in plans:
        dist_code, wavelets = a_plan
        for wave_name, num, sample_no in itt.product(wavelets, num_obvs, range(100)):
            tot_time += int(1.25 * walltime(num))
            job_data = ('best-j', (dist_code, str(num), str(sample_no + 1), wave_name, resp_name(resp_num)))
            jobs.append(job_data)
            if tot_time > 3600*4:
                gen_and_launch(jobs, tot_time)
                tot_time = 0.0
                jobs = []
                resp_num += 1
    if len(jobs) > 0:
        gen_and_launch(jobs, tot_time)
    print('TOTAL JOBS :', resp_num)


@main.command()
@click.argument('num_obvs', type=int)
def batch_best_c(num_obvs):
    """
    Launch jobs to process best-c
    """

    _ETIMES = {
        250: 94,
        500: 328,
        1000: 550,
        1500: 1260,
        2000: 1955,
        3000: 3600,
        4000: 18100,
    }

    def walltime(job_data):
        "Estimated walltime in secs"
        if job_data[0] == 'kde':
            return 1200
        return _ETIMES[num_obvs] * 1.1

    # num_obvs = [250, 500, 1000, 1500, 2500, 3500, 5000]
    plans = [
        ('ex01', ['sym3', 'sym4', 'db4']),
        ('ex02', ['sym3', 'sym4', 'db4']),
        ('ex03', ['sym3', 'sym4', 'db4']),
        ('ex04', ['sym3', 'sym4', 'db4']),
    ]
    fname_func = lambda n: 'RESP/exp02/best-c-%05d-%05d.tab' % (num_obvs, n)
    headers = """dist_code\tnum_obvs\tsample_no\talgorithm\twave_name\topt_target\ttreshold_mode\tbest_j\tstart_j\tdelta_j\tnum_coeffs\tb_hat_j\thd\trunning_time"""
    jobs = JobList(
        job_name='best-c',
        exp_dir='exp02',
        headers=headers,
        time_func=walltime,
        fname_func=fname_func,
    )
    os.makedirs('RESP/exp02', exist_ok=True)
    modes = [SPWDE.TARGET_NORMED, SPWDE.TARGET_DIFF]
    for a_plan in plans:
        dist_code, wavelets = a_plan
        # mini-batch kde
        tot_blocks = int((0.0003 * num_obvs * num_obvs + 0.4687 * num_obvs - 50.486) / 900) + 1
        kdes_per_block = int(100 / tot_blocks) + 1
        for ix in range(tot_blocks):
            job_data = ('kde', (dist_code, str(num_obvs), str(1 + ix * kdes_per_block), str(kdes_per_block)))
            jobs.append(job_data)
        for wave_name, sample_no, a_mode in itt.product(wavelets, range(100), modes):
            job_data = ('best-c', (dist_code, str(num_obvs), str(sample_no + 1), wave_name, a_mode))
            jobs.append(job_data)
    jobs.process()
    print('TOTAL JOBS :', jobs.num_jobs)

class JobList(object):
    def __init__(self, job_name, exp_dir, headers, time_func, fname_func):
        self._job_name = job_name
        self._exp_dir = exp_dir
        self._headers = headers
        self._time_func = time_func
        self._fname_func = fname_func
        self._jobs = []
        self._total_time = 0
        self._jobix = 0

    @property
    def num_jobs(self):
        return self._jobix

    def append(self, job_data):
        exp_time = self._time_func(job_data)
        if self._total_time + exp_time > 3600 * 6:
            self.process()
        self._jobs.append(job_data)
        self._total_time += exp_time

    def process(self):
        if len(self._jobs) > 0:
            self._gen_and_launch()
            self._jobs = []
            self._total_time = 0
            self._jobix += 1

    def _gen_and_launch(self):
        os.makedirs('RESP/plans', exist_ok=True)
        tot_time = (60*15) * (int(self._total_time / (60*15))+1)
        fname_result = self._fname_func(self._jobix)
        fname = str(Path('RESP') / 'plans' / Path(fname_result).name.replace('.tab', '.pbs'))
        with open(fname, 'wt') as fh:
            fh.write(PLAN % {'exp_dir': self._exp_dir})
            fh.write('rm -f "%s"\n' % fname_result)
            fh.write('echo "%s" > %s\n' % (self._headers, fname_result))
            for job in self._jobs:
                command, params = job
                params = list(params)
                params.append(fname_result)
                params = ' '.join(params)
                line = 'python3 $SW_DIR/src/runit.py %s %s\n' % (command, params)
                fh.write(line)
        args, cwd = popen_args(fname, self._job_name.upper(), timedelta(seconds=tot_time))
        print(' '.join(args))
        # subprocess.call(args)


if __name__ == '__main__':
    main()
